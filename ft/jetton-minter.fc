;; It is recommended to use https://github.com/ton-blockchain/token-contract/blob/main/ft/jetton-minter-discoverable.fc
;; instead of this contract, see https://github.com/ton-blockchain/TEPs/blob/master/text/0089-jetton-wallet-discovery.md

;; Jettons minter smart contract

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

;; TON Jetton Minter 智能合约
;; Jetton 是 TON 区块链的标准代币协议，类似于以太坊的 ERC20
;; 这个合约负责铸造和管理 Jetton 代币

;; 存储结构
;; storage#_ 
;;   total_supply:Coins        - 代币总供应量
;;   admin_address:MsgAddress  - 管理员地址
;;   content:^Cell            - 代币元数据
;;   jetton_wallet_code:^Cell - Jetton钱包合约代码
;; = Storage;

;; 加载合约存储数据
(int, slice, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_coins(), ;; total_supply
      ds~load_msg_addr(), ;; admin_address
      ds~load_ref(), ;; content
      ds~load_ref()  ;; jetton_wallet_code
  );
}

;; 保存合约数据到存储
() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
           .end_cell()
          );
}

;; 铸造代币的内部函数
() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
  ;; 计算接收者的 Jetton 钱包状态初始化数据
  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);

  ;; 构造发送消息
  var msg = begin_cell()
    .store_uint(0x18, 6)  ;; 消息标志
    .store_slice(to_wallet_address)  ;; 接收钱包地址
    .store_coins(amount)  ;; 转账金额
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)  ;; 消息参数
    .store_ref(state_init)  ;; 钱包初始化数据
    .store_ref(master_msg);  ;; 主消息数据
  ;; 发送消息，单独支付转账费用，出错时回滚
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

;; 处理接收到的内部消息
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    ;; 加载合约数据
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

    ;; 处理铸币操作
    if (op == op::mint()) {
        ;; 只有管理员可以铸币
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();  ;; 接收地址
        int amount = in_msg_body~load_coins();           ;; 转账金额
        cell master_msg = in_msg_body~load_ref();        ;; 主消息数据

        ;; 解析主消息中的代币数量
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();

        ;; 执行铸币操作
        mint_tokens(to_address, jetton_wallet_code, amount, master_msg);
        ;; 更新总供应量
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
        return ();
    }

    ;; 处理销毁代币通知
    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();       ;; 销毁数量
        slice from_address = in_msg_body~load_msg_addr();   ;; 来源地址

        ;; 验证发送者是否为合法的 Jetton 钱包地址
        throw_unless(74,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );

        ;; 更新总供应量
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);

        ;; 处理响应地址
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
          ;; 发送余额通知
          var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
          send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == 3) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == 4) { ;; change content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code);
        return ();
    }

    throw(0xffff);  ;; 未知操作码
}

;; 获取代币数据的 getter 方法
(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

;; 获取用户钱包地址的 getter 方法
slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
